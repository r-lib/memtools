% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/snapshot.R
\name{roots}
\alias{roots}
\alias{root_cpp11}
\alias{root_ns_registry}
\title{Roots of interest}
\usage{
root_cpp11()

root_ns_registry()
}
\description{
These functions return useful starting points to supply to
\code{\link[=mem_snapshot]{mem_snapshot()}}.
\itemize{
\item \code{root_ns_registry()} returns R's namespace registry as a list. It
contains all the namespaces currently loaded in the R session.
\item \code{root_cpp11()} returns the precious list of cpp11. This is a
doubly linked list preserved in R's own precious list.
\item \code{root_precious_list()} returns R's precious list. However this
requires a custom build of R where \code{R_PreciousList} is exposed as a
non-static symbol.
}
}
\section{The precious list}{

The R precious list is (as currently implemented) a pairlist of
objects currently protected via the C API function
\code{R_PreserveObject()}. Preserved objects are stored in this pairlist
until a corresponding \code{R_ReleaseObject()} call is performed. Some
objects are meant to be preserved for the whole duration of the R
session (global caches), others are preserved for a limited
duration. It may happen that \code{R_ReleaseObject()} is not being
called when it should. This causes a memory leak via the precious
list.

R currently does not provide an easy way to get the precious list.
So you will need to either patch R to expose it (e.g. remove its
\code{static} qualifier) so that you can call \code{root_precious_list()}, or
run R though a debugger like \code{gdb} or \code{lldb}.

If you choose to use a debugger, use \code{p} to print the address of
the list:\preformatted{p R_PreciousList
#> (SEXP) $0 = 0x000000010107cf58
}

Copy that address in an R string and dereference it with
\code{\link[=deref]{deref()}}:\preformatted{prec <- deref("0x000000010107cf58")
}

Avoid printing the precious list in the console because it contains
a large amount of data, such as the global cache for the global
environment and attached packages.

Some things to consider while working with the precious list:
\itemize{
\item If you record a snapshot of the precious list, beware that
objects in the global environment will be reachable through the
global cache. These objects are normally excluded from
snapshots. You can exclude an object from the snapshot by
stashing it with \code{\link[=mem_stash]{mem_stash()}}.
\item If you take before and after snapshots, make sure to capture the
\code{R_PreciousList} address each time. The precious list is
currently implemented as a stack of pairlist nodes. If you don't
refresh the pointer you will miss all new elements added on the
top of the stack.
}
}

